---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/inject: enabled
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["split.smi-spec.io"]
  resources: ["trafficsplits"]
  verbs: ["list", "get", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Grafana RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQU9NWHZNTm1TcGs0MGVRaThlNUpPVnd3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TVRBMU1EZ3hPRFV6TkRWYQpGdzB5TWpBMU1EZ3hPRFV6TkRWYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURKbHJ4UWhUdERKWUN2UWp0TVUwSWUKaDdsdkpHNm9VSzZUR01sNUJTOEZ1ZmxjdEpVTkQwcmtXeW12YU5DaVA2dlk4OTc4ZXNFQ0dmQ1hveTRkR0liWApOUXU3WmYvZ1J5ZXNnRkdLODlTN0Jza2ovSE1ORDZIMnlGOWpzNEFROSt3cFkzOVYzOTM3WWNEN2VrMUtGaFpRCk96Ymhtd0pJQ2lVRXNVOUpWYW94aUpEMlRUZ3BlUFdoUXlHYnozWHpOTXh6d3czTlBrdERwc3hEWDFacTF4K3UKbWYvM1hRZmtma2FGWlp6a0I3L1dMV0FtTmROUDZiVkt2bjRjdU03VndIZDVXL05FLzgrckV5SFVybnp1S25OegpRSE40amQ4clJscFBoZHFRbWpnVU9WUXl4T0x4dWtvdkc2V2dGTW9yS0NlUTliMUxsdWFHMk9kY0l1M2N3N3Q5CkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQThZSGtEaDJlVzJJNTFvVGlNYUtIV2YyV0E5ZHIxCjdSRnFBNDBXMHR2VjMrQ2ZYNUl5eENPL2kwanNFUGd5RTMzWEs5NXBOUXJDN1hKbEZIWVlUOC9NbjFDUHJ6VWYKVWVzSmVHRGdIWi9NOWxHb0FnaUJwNHk3QVBRWDl1UzY1MXMzR3NsN2ZubUlLWURZLzNuMjEvWXZqM2d4TDdKNApLaWozdHpySnkrTGMrcTEyajNuemJiTm50dlVYRVV5ZWtXU3hNbk1LSHhVaUZTNXBjWE51aUFSb0puYkxzUnl0ClBYQ2hhVFN5eDVnSzhnRkh6OTZtRktWVDdUYWhraEw4bGFUSkJvOHF0ZCtVVDI0dDV2b0MrbnVwa1FER2lmbWsKazFRa1pscGJKemJsMWhzS1hpR05MSG4yMHpLYWJnNGxZc2pqTW95bXRzSlIwUW5KUU01a212N3UKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBeVphOFVJVTdReVdBcjBJN1RGTkNIb2U1YnlSdXFGQ3VreGpKZVFVdkJibjVYTFNWCkRROUs1RnNwcjJqUW9qK3IyUFBlL0hyQkFobndsNk11SFJpRzF6VUx1MlgvNEVjbnJJQlJpdlBVdXdiSkkveHoKRFEraDlzaGZZN09BRVBmc0tXTi9WZC9kKzJIQSszcE5TaFlXVURzMjRac0NTQW9sQkxGUFNWV3FNWWlROWswNApLWGoxb1VNaG04OTE4elRNYzhNTnpUNUxRNmJNUTE5V2F0Y2ZycG4vOTEwSDVINUdoV1djNUFlLzFpMWdKalhUClQrbTFTcjUrSExqTzFjQjNlVnZ6UlAvUHF4TWgxSzU4N2lwemMwQnplSTNmSzBaYVQ0WGFrSm80RkRsVU1zVGkKOGJwS0x4dWxvQlRLS3lnbmtQVzlTNWJtaHRqblhDTHQzTU83ZlFJREFRQUJBb0lCQUFtaGZPK3YzY3Z3Yjd4dgp3cHQ3NHMzSW1EQmFJanRDVjRUSmkxNlB3OVpYTXpXZG52MVh2TEU2TmJ5ZW1sRVdENlMyeWZGdi8rYVV6S3pCCjdBTVIxK2RTTG5ST2hESDMxRXBtZXY3VGRWZFdGS2YyZUp5b0lZbkR1dUx0Z1hIT0ZtZEh6SjZTcW0xSEYwd3MKWktMa2VUNXVCY296ZUtGdWNxUk53RWIxbzhMbitLY3hPWlBDZjVpWUYwS0Yvb01OZnlrbGxpSlg5TEt5UDJDOApqbzRJbkJCM3pBVXpDbVpUc2ZQWlZtcjFCeFJnUTU1ZDhqbnljWEdzaFlUQTEySitXeTlhQ1VDSjVqRzI2QmRLClh2S2R4Y1VHYm5RY0RETGpJU1o1UWxoRnpKZVNOSDJHbjRZeE82dHVCdndwTXY3cXB6T1VLbkFZUjZTSmVyTGQKalNTTTVnRUNnWUVBM3ZaMlN1UlhwK2lFWkFBa1RCTXhKZnlkY1NRYUVCRkN2ZkdWdGFFWmw0SDJ6aDFYV2dETwpKOHRWY292UkVSNEN1R3JMSTVVUWRQV095anJBWk10RG5NQkJXcUxnbDhNU1RySWZLeHB4OCtkOXl5eEZKeWM3CjFlQWhCcFY5K2dHS0I3VUtyNStpcHRyZDhXTzg0Y0xDcEtQQWVYSXdlcnhDcllLTENFMkw2NEVDZ1lFQTUzV0IKcXJkWXlxWGlKKzU1U1FYZXJRa2RWTGNJckhlUkdlNWVmcVVEN0FBcmRDbG91aCt4dTRENEJnU0lteVVnN1FQNQo0d0VIUUh5WlV5SnpzNW10Q2dHSElNMndjNHNIeWw3SUN5OVJjZjFrLytkWTl1V1pNTkx5bnJXdWh3NmMrcFlxClN5RDQvUGdKZ1YwZGhDZ28xV2dSWHFWc0FKMXhrNjNwVlA1K2ZmMENnWUJzSWN1czlxRXNaYkFQYjZJcTR3UHIKRUdDckJuODlXNkdxelFkMlZ2TTZiMlZyQVAva1BvKzg3UGc3M1dNL2tmWnZ5aHRLM25oa3dOTEhjVWJ0bTBibgpOclo3WnBMV0IxMVJuVUZRZmpyVnQyZGlxYzIvOTE4bGt0VnhnLzdjeVBKUVdwVWNKNmVTbElNZkZ1Zjc5YURBCmlFcEluQUMzQmFhd3o2YnVGKzNNQVFLQmdGQ0l0MFJDSlRmbGZnb3MxTENPeFVycHQvWG85YkNrcmEwYkhtL3MKVkxBQjR4eTQ1OEtURXBGT0wzNVFoNE9MNktmdlVUd2wrSEw4cDVDZ2xTZHhtaDY0SjE5SGtsU3hsRlZhb3pvWgpEYnFlMDB5akgzWlFydnVvK2xnMG1QUlBKbG1lZERyTnp6U2R6UmpnNEV0Q2VlcS9HZ1FYaEx1MkRIVzQ5azNuCmV2VzFBb0dBUWdvUnM2MWV2WkV5RzVQdXhrRDZsM21mVjM0MFN1dEpGdmZvR2x2RFFBb0sxYVFvKzBuYUF1WDQKcVZ2VWhPMW5VK3FWT0tGS2ZaUkM1RFlPc2lSZUphdm1aTVR6Q1V4MmFCcG5oNDNxRzBvaEZIOWV3NksyeWQyRwo4MC9pa3lWSmZHRVJZa1Y2ZmVTeTRqbVMzOGluT3R6aldXeTYrYVBaRE11UTFMUkpoOFk9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQU9NWHZNTm1TcGs0MGVRaThlNUpPVnd3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TVRBMU1EZ3hPRFV6TkRWYQpGdzB5TWpBMU1EZ3hPRFV6TkRWYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURKbHJ4UWhUdERKWUN2UWp0TVUwSWUKaDdsdkpHNm9VSzZUR01sNUJTOEZ1ZmxjdEpVTkQwcmtXeW12YU5DaVA2dlk4OTc4ZXNFQ0dmQ1hveTRkR0liWApOUXU3WmYvZ1J5ZXNnRkdLODlTN0Jza2ovSE1ORDZIMnlGOWpzNEFROSt3cFkzOVYzOTM3WWNEN2VrMUtGaFpRCk96Ymhtd0pJQ2lVRXNVOUpWYW94aUpEMlRUZ3BlUFdoUXlHYnozWHpOTXh6d3czTlBrdERwc3hEWDFacTF4K3UKbWYvM1hRZmtma2FGWlp6a0I3L1dMV0FtTmROUDZiVkt2bjRjdU03VndIZDVXL05FLzgrckV5SFVybnp1S25OegpRSE40amQ4clJscFBoZHFRbWpnVU9WUXl4T0x4dWtvdkc2V2dGTW9yS0NlUTliMUxsdWFHMk9kY0l1M2N3N3Q5CkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQThZSGtEaDJlVzJJNTFvVGlNYUtIV2YyV0E5ZHIxCjdSRnFBNDBXMHR2VjMrQ2ZYNUl5eENPL2kwanNFUGd5RTMzWEs5NXBOUXJDN1hKbEZIWVlUOC9NbjFDUHJ6VWYKVWVzSmVHRGdIWi9NOWxHb0FnaUJwNHk3QVBRWDl1UzY1MXMzR3NsN2ZubUlLWURZLzNuMjEvWXZqM2d4TDdKNApLaWozdHpySnkrTGMrcTEyajNuemJiTm50dlVYRVV5ZWtXU3hNbk1LSHhVaUZTNXBjWE51aUFSb0puYkxzUnl0ClBYQ2hhVFN5eDVnSzhnRkh6OTZtRktWVDdUYWhraEw4bGFUSkJvOHF0ZCtVVDI0dDV2b0MrbnVwa1FER2lmbWsKazFRa1pscGJKemJsMWhzS1hpR05MSG4yMHpLYWJnNGxZc2pqTW95bXRzSlIwUW5KUU01a212N3UKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["policy"]
  resources: ["podsecuritypolicies"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: viz-psp
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    namespace: linkerd-viz
roleRef:
  kind: Role
  name: psp
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
- kind: ServiceAccount
  name: grafana
  namespace: linkerd-viz
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.1
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: 0d5b035f4d141dc2c13e1f89046de78fe0fb1208075734c3977400b866f2db51
        linkerd.io/created-by: linkerd/helm stable-2.10.1
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        image: cr.l5d.io/linkerd/metrics-api:stable-2.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: metrics-api
---
###
### Grafana
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: grafana-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
data:
  grafana.ini: |-
    instance_name = grafana
    [server]
    root_url = %(protocol)s://%(domain)s:/grafana/
    [auth]
    disable_login_form = true
    [auth.anonymous]
    enabled = true
    org_role = Editor
    [auth.basic]
    enabled = false
    [analytics]
    check_for_updates = false
    [panels]
    disable_sanitize_html = true
  datasources.yaml: |-
    apiVersion: 1
    datasources:
    - name: prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://prometheus.linkerd-viz.svc.cluster.local:9090
      isDefault: true
      jsonData:
        timeInterval: "5s"
      version: 1
      editable: true

  dashboards.yaml: |-
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: true
      editable: true
      options:
        path: /var/lib/grafana/dashboards
        homeDashboardId: linkerd-top-line
---
kind: Service
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: grafana
  ports:
  - name: http
    port: 3000
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.1
    component: grafana
    namespace: linkerd-viz
  name: grafana
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: grafana
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.1
      labels:
        linkerd.io/extension: viz
        component: grafana
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - env:
        - name: GF_PATHS_DATA
          value: /data
        # Force using the go-based DNS resolver instead of the OS' to avoid failures in some environments
        # see https://github.com/grafana/grafana/issues/20096
        - name: GODEBUG
          value: netdns=go
        image: cr.l5d.io/linkerd/grafana:stable-2.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
        name: grafana
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
        resources:
        securityContext:
          runAsUser: 472
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/grafana
          name: grafana-config
          readOnly: true
      serviceAccountName: grafana
      volumes:
      - emptyDir: {}
        name: data
      - configMap:
          items:
          - key: grafana.ini
            path: grafana.ini
          - key: datasources.yaml
            path: provisioning/datasources/datasources.yaml
          - key: dashboards.yaml
            path: provisioning/dashboards/dashboards.yaml
          name: grafana-config
        name: grafana-config
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    - job_name: 'grafana'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: ['linkerd-viz']
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        action: keep
        regex: ^grafana$

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.1
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.1
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
      - args:
        - --log.level=info
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.19.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.1
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: 4e50396369c23529f263259904373c919099f6b51b0645b71318b83f69d1516e
        linkerd.io/created-by: linkerd/helm stable-2.10.1
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -identity-trust-domain=cluster.local
        image: cr.l5d.io/linkerd/tap:stable-2.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQU4wUlFrQkRidkRnYlZZMVB4eXBua2t3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TVRBMQpNRGd4T0RVek5EWmFGdzB5TWpBMU1EZ3hPRFV6TkRaYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFDMnNOOTRSaU1kYUFUNjdoY0xDK0k3eTFVMm1pRmZ4Y09LOHRod3NCM1d4eStCSlo3aXpRQnZ2MTZwSWI4dQpzODZpaUs0bmFRV0JUY2t3QTF1aGtDWUJld2RUM2tWbm9LQVNxbElxOFUzM3ZySCtXL2xKbmJsaUpNYW9pSkhHCjZ5Y1pZNUR3bEdQK0hYeE9wdUJ0WHZNa2ZubTh3ZC95OUVFSURjVUthcDZrdFJFUk1ucFk2VU83akNKOEFSYkIKNFN1WDJvc1NReGVFYkZnTTRyR0p4Y3RLQ3RGTEF0dHFrZ2RCd3V1VGJEOGFRdUFrVTJxbFBWaFRXaGp4a1p6WgpBREtjWHA5Qm1ZRGlBeS83V3Bya1UvaWxnWEl4cTRmWDFOM2kraldEeTRzNG9Rc1Z5MWJQNDNrUFZBeEkwYVY0CmNteGlsaTZsQ2RZU1VpK2NHb1cvajdrYkFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUFZSm1TWGVnMFdiblpqQ1N4TmlFUWl6QksvN2VPMHdrVkpQZjBDc2YyVy9pSzdkb1g2Vm9QQmRSRW8KYW1iOE1Eb2x1TDRESW9sbW54UXJaM2hlRExZdVRiZXlXbEtBeE5wR3liTDVSSXRQV3crOS9tZS9Zc0pOVXNOdApqeXIxZFdyNGlQa2NQVkpxNmFKMDVaaFcwQ0lOalQvSUJ6RTBBTXhJbHFkb25ic0ZJMW4xdFlGbHB2WU9qb1R4CnVYTVNiZEZROXR4VUxaTU41ZVNyb0JIVDdNN2FNUkdGMUJvR0FqK0dGb0RUaWpsZENXcmNTb0RWejQyOXRaOWwKSHptY05DV0tISXAydGd5N3R3N3AwVnJwdEg2S2VVcnFaRkxiQmRLMm1VQVBpQXZtWkIzeGV0SzZxdUR5alFwYgpsUnFuY1lRL2ZvUU16S3VBWkdVTmhYV3JTYzgzCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdHJEZmVFWWpIV2dFK3U0WEN3dmlPOHRWTnBvaFg4WERpdkxZY0xBZDFzY3ZnU1dlCjRzMEFiNzllcVNHL0xyUE9vb2l1SjJrRmdVM0pNQU5ib1pBbUFYc0hVOTVGWjZDZ0VxcFNLdkZOOTc2eC9sdjUKU1oyNVlpVEdxSWlSeHVzbkdXT1E4SlJqL2gxOFRxYmdiVjd6Skg1NXZNSGY4dlJCQ0EzRkNtcWVwTFVSRVRKNgpXT2xEdTR3aWZBRVd3ZUVybDlxTEVrTVhoR3hZRE9LeGljWExTZ3JSU3dMYmFwSUhRY0xyazJ3L0drTGdKRk5xCnBUMVlVMW9ZOFpHYzJRQXluRjZmUVptQTRnTXYrMXFhNUZQNHBZRnlNYXVIMTlUZDR2bzFnOHVMT0tFTEZjdFcKeitONUQxUU1TTkdsZUhKc1lwWXVwUW5XRWxJdm5CcUZ2NCs1R3dJREFRQUJBb0lCQVFDclByb0tMSHhIMlRRcAozamxkVW1OYXR5c0dCbzNZRHpGUE1ua3RqL2c0VmZjeWNJZ3hnZ1d4dWNsS2NtYVpxVk84eUsrdUkyUlVvd3c5CjVEZmxCcENKZk1BT25sK2lWazhWais5N2J6c3RTZVBnVUdnbzJCNW9YNTZUWlloMzAvNlBidVB5anJYNEFiMSsKb0Mvb2RVTW1aeU5IaXRlWURkcFRhVXpVaWNKeEVlNzRHVWJNWW1YbHFFWjRsWkV1d2hsKzdEVTlrMXBabEduKwp2Ly9kNlZsREtKVVdKVUtvbmpQWXFtMHFGRjBwWmF5ZUV1NDQ3bWR6MDFPUDQ1cFZrM2ZTL2FIenVab2wvd0hGCm9sM0JSWnlrczBFLzJyRUVZTkM2TlNqUjdYWEpnajRHcWVHQ0tIUVUyRWxlZmhMQ3dTcFFEYjZPZmlMK09BNlkKNEtLQUljeHhBb0dCQU42SFNZOXowUk5TODNIY3BzV2JRNUY0Z2d5clozc2RsSUlWTHN5MkUrdzhBeVhpNk45SQphb0ljVEVxcHRHcEZURzc4T2x4dVpjVFEreXF3QnI2d3FhVE5zKzZQVUYvbTBON21Odi9JNFQwZ1hxU0FTaGF6CkpsbUVPUjJ2MUd4SjlJNHF5NnF1YWw0a2o1bDVoYWtWWVdnMEtnU29VaENwRFJxalB5N3lDL3FEQW9HQkFOSXIKbUZHVkNrK1dnYkhCcmJKa2xQVkN2VlpHcHBIMWRPYjZUSWZDYnR4YlFTR1JGdUtnUXN3UzdpMExPN21GUW8rNgpsRjB3V2QxUnNadWNGSHl1RjRPTXVkMFBUUmVxTllPVlNFT0lqTlVmWFBaVDJzdzdPU1FmWXhxc2d6V09mUjNGClpkUUxkaS9pczhEamh2QjJBTDBaWTlrR09wYVpSTEgwSlpUcXdtT0pBb0dCQUpOUXlMZjVHajVLdWZOMCtjcnoKNEtWYk8rMGJRK1JUVHM5WEtxWkhHNlZXalZiMWd1amVUZlJZdTREcUhCQUdWSFZjOFYzamorZmQyWWtIQTFBVwpNQmgwUFZ2KzhGeXN0elg0L2d3VGRsazdKcXlNYVgvaGxjL0pJdTZ1U2xodUZVSlF2b2Y5ODFqanAxVVpDQTFKCnBEU1I1QWMxVHk3TVcycDVEQWtPSURQMUFvR0JBSXIvNmkyS3ROY09ZNWg4ejdROGNZZ0VLOVR6eFJhamtEMXoKTFVwY2ZaV2ZoT1ArWVhSaEtjeHVlTGV4eGo1Y3REajYzVVVFeFdwcXJWeU5UYjlvSklVTWZhQ0dqaVlvbkZ2NgpUMkRhM3NuVmhGWWwvMzh6YkFkSCt2T1pSTzRXM3dqaGxRYzR6V0crUGNSRXR1b3lJU3J2cituSkJOYTFaNG1LClA1RE44dUtCQW9HQVFHZ3NzUU1qa0VLVGlHU3NCUW45WDJneEg1RVQxdkt3cng0ZGN0R1NCUm5kTnVRUG0xQWIKLzczclIxYmNrUDkyT3duNEZvb3JQYUYvQ1JQZWZYYWhQNTAyS1VhbnVtakd1MUo3dk14YmVRTjNNNmFBZGc5eQpiMmRXbmg4c1lkaUJFcFlqQVNZSEo5VmZ1WWh1MUZLMERSLzBhMUhoOXdNaEpKUXdsSVJ6bDhnPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQU4wUlFrQkRidkRnYlZZMVB4eXBua2t3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TVRBMQpNRGd4T0RVek5EWmFGdzB5TWpBMU1EZ3hPRFV6TkRaYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFDMnNOOTRSaU1kYUFUNjdoY0xDK0k3eTFVMm1pRmZ4Y09LOHRod3NCM1d4eStCSlo3aXpRQnZ2MTZwSWI4dQpzODZpaUs0bmFRV0JUY2t3QTF1aGtDWUJld2RUM2tWbm9LQVNxbElxOFUzM3ZySCtXL2xKbmJsaUpNYW9pSkhHCjZ5Y1pZNUR3bEdQK0hYeE9wdUJ0WHZNa2ZubTh3ZC95OUVFSURjVUthcDZrdFJFUk1ucFk2VU83akNKOEFSYkIKNFN1WDJvc1NReGVFYkZnTTRyR0p4Y3RLQ3RGTEF0dHFrZ2RCd3V1VGJEOGFRdUFrVTJxbFBWaFRXaGp4a1p6WgpBREtjWHA5Qm1ZRGlBeS83V3Bya1UvaWxnWEl4cTRmWDFOM2kraldEeTRzNG9Rc1Z5MWJQNDNrUFZBeEkwYVY0CmNteGlsaTZsQ2RZU1VpK2NHb1cvajdrYkFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUFZSm1TWGVnMFdiblpqQ1N4TmlFUWl6QksvN2VPMHdrVkpQZjBDc2YyVy9pSzdkb1g2Vm9QQmRSRW8KYW1iOE1Eb2x1TDRESW9sbW54UXJaM2hlRExZdVRiZXlXbEtBeE5wR3liTDVSSXRQV3crOS9tZS9Zc0pOVXNOdApqeXIxZFdyNGlQa2NQVkpxNmFKMDVaaFcwQ0lOalQvSUJ6RTBBTXhJbHFkb25ic0ZJMW4xdFlGbHB2WU9qb1R4CnVYTVNiZEZROXR4VUxaTU41ZVNyb0JIVDdNN2FNUkdGMUJvR0FqK0dGb0RUaWpsZENXcmNTb0RWejQyOXRaOWwKSHptY05DV0tISXAydGd5N3R3N3AwVnJwdEg2S2VVcnFaRkxiQmRLMm1VQVBpQXZtWkIzeGV0SzZxdUR5alFwYgpsUnFuY1lRL2ZvUU16S3VBWkdVTmhYV3JTYzgzCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: bddac67f42b263c453260dfdae7dc1b39ea393595f14e8d442af995e1264db17
        linkerd.io/created-by: linkerd/helm stable-2.10.1
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - -log-level=info
        image: cr.l5d.io/linkerd/tap:stable-2.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.1
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.1
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-controller-api-addr=linkerd-controller-api.linkerd.svc.cluster.local:8085
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -grafana-addr=grafana.linkerd-viz.svc.cluster.local:3000
        - -controller-namespace=linkerd
        - -viz-namespace=linkerd-viz
        - -log-level=info
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        image: cr.l5d.io/linkerd/web:stable-2.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: web
