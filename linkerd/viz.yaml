---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/inject: enabled
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["split.smi-spec.io"]
  resources: ["trafficsplits"]
  verbs: ["list", "get", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Grafana RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQU8wMDV5YTdxZkJ6REJPQ2VtU2dqM3d3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TVRBek1qQXlNVEl5TkRKYQpGdzB5TWpBek1qQXlNVEl5TkRKYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURLcEJnRXh3bDdWQXJUVFRXKzhMMFcKZGlTMVJibGV0ak5WOXZyNUdIOCs5VXVKcDBSSjV2UXMxek1nMVZxc0ZLMEhPdFkxTzBTZ05BZHdtdjBKSWdoOQpzSGtPMnRHbGpKTjdzNFBDbUJKWTc0Nk1GcUE0WVBRM0lJQXNiL2pCZzVkOXFvZ3Mzb3dhbWlSZ2cxK3RNajZHClEvVWdZay9YVjRFd1FucTdmUnJkdVJNazRrdHo1bUFsUVlZTGEwdHpKaWRkaC9EaWJINEM0ZTRwMU90dUlQT2wKdUZtRFY2QzhEMEtVVEp2aUhrM1YyT0V0M0oyeTFCZ3I5ZTR5Q09MbDJFWVlVdmxBeWZjbVpzUy80TGVoOTNvQwpsQ0k0WXpseUl4Mk5rRHJsL0ZNZFJXM2ZaakFLcEovbzZ6eDFhVkJmazJOSWdRQi9MZk1nRlBXeC9VbE9MNHE3CkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQUg1dUJXQXJEcVJtT0x5L01MOC9IaHJlNkpaU1lNCmdIenorUkdUaURkZ1doZWlNZG9CMjdyYXVESTFWdmxHNTdHeUJLQXlYUWdjb3NUdkhsWWs1bEdsSVh1ZzRSemIKQkg1TGtJNXUzL2ZpNXN1M21YQW5HUEJPVHNKRDRpanYxd1JlNWNRV1E0MDIxUGEyc1NxWnh1aHRZaTVjQVRxbApIQm9GczVLMzZkZEJmcitZOHI1amNzMTNLOVQ3Sm8reWV6cnJ4TFFCTmZKS1djMWZTaGR2N2k3Y1QvTjZERzZOCm9iT0lrbUc3ckhBM2VBWFk0OTVxYlQxZUNueXhHTUVzOVltaFVCUHR1VzJnNHhENEUzNVV4M2lvU24xeGQ5Z1kKVDJzYy9CTEtzR29IR3N1ZWx2bXZxVzR3RUxKQlQ3NVZ5L1dQdWdNNEVqdWcybHFQb3lUK3hLOW8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeXFRWUJNY0plMVFLMDAwMXZ2QzlGbllrdFVXNVhyWXpWZmI2K1JoL1B2VkxpYWRFClNlYjBMTmN6SU5WYXJCU3RCenJXTlR0RW9EUUhjSnI5Q1NJSWZiQjVEdHJScFl5VGU3T0R3cGdTV08rT2pCYWcKT0dEME55Q0FMRy80d1lPWGZhcUlMTjZNR3Bva1lJTmZyVEkraGtQMUlHSlAxMWVCTUVKNnUzMGEzYmtUSk9KTApjK1pnSlVHR0MydExjeVluWFlmdzRteCtBdUh1S2RUcmJpRHpwYmhaZzFlZ3ZBOUNsRXliNGg1TjFkamhMZHlkCnN0UVlLL1h1TWdqaTVkaEdHRkw1UU1uM0ptYkV2K0Mzb2ZkNkFwUWlPR001Y2lNZGpaQTY1ZnhUSFVWdDMyWXcKQ3FTZjZPczhkV2xRWDVOalNJRUFmeTN6SUJUMXNmMUpUaStLdXdJREFRQUJBb0lCQURxY3RBWE52RVJienJYSApnMkF6S2I0eGRmU29zakZlNmdKWGFjaGErWk13U0NVTXFJZm5zWUMyemljVkR5RHU2ZzFKUzJRaVBIdEtFVXpVCng1TzRzRlFLa3psa3VYYjA3a085Yk1NQVVXNC8vQzh3N0M3aWZFRGx1YTBneGdiVEZTSllEUU5OYTZEV0xPZHQKbUdMMFFYbDhkbzVqWVV5Y0Z0WHFwSzFPUmxNVERTKzY4VXM2dlovTlcwdElIQkVYWWx5b3dvYlJRVmU0eSthZwpkd1V0bWMxb2x3cTdEYk9iYzFlOWdIK1RiVVVvd2sxYS9GdkNhUk9xNG85OWhkN2RJT01PeHM3UWd0RTdvaHFECkdJWjl0UzlQUXUwUys3dlk1U3k5TUpUSHorZjVaNDZKVWp5M0UrR0VidzNYVWkrTW9DNzh1MkpGNEpXWHQyM0sKUGhrQXg0RUNnWUVBMStCaGQwdmZXU05xZ1hNYkxwWktsQTN1dFlJTVJwMmxLNEVpTytZVS9UcC9aRkJXU05DcgpRQ0hmaEREQmJoc2tGaUlzUWxyTm1Mb1pvbVhESTA2K3dJQjZvZ1NqZGgxTVlTbmZiUDN5bE91VlB2Q3lvWHZGCmNRVG8wbm5VMHFsWFI1WnZSS09UaGxySXh1WnJ6Vis1RVNnTi9BOFpKR2IxRXRGRlVjTGVhZ3NDZ1lFQThFMzAKZUt2anI5YSs3L05sLytSUjR1R3VHRGNiamhXSGVaUHpEaGtVNDczSldNUllKY0RPdG9HS1VHWXJEbVVBM0QvYQp5eExsaU5Edm11ZW96V29CczlUa1hLdGk3aUhQb20raWYrL1ZNeUorOEV0V1hwdnRuMzR5T0phYnpCVmd1MkZzCmRNMHpWeUU1OHp0anQ0V2ZPZ29FeU92Z3NaMFZqZjRIWUsxUGdCRUNnWUVBbndKdXFHR2huVlhoOElIcHBySWIKTXR6a1ZKdjdFTlN6d2N5M2U2bHBFbkZSUG9HU1hNWWZMZmtGVzZoU0FobEp4bWZiYy9EUWVjdXljQlZHM0MzMwpnWEhoWW8vS0c0bFBKazZpZlBTOUJ3WlVBMjFtRmw1RnU0N2pNNDE3dnNQdlB4TEcyS2NvVmhGdXpGc1RVczVNClVoL1AxVGNGelBOdFZ6UUFQRTR1WjZzQ2dZQWVJQ2U5MlE2NlJKbTdTekJHWEVGSHlETWpKZ1YyVW95aFdVTG4KU1kyczMyWVdrc2JhTk1tMVo1Z0hiRWVKam5BRkxKd3BTVDB0WWNRb0QxTENMYi80NDMrZGZuN3dpNXlVS0pxZQpuMXFEQnBnVFY5NkVEZGhFWG5XOVVtUkZ1WWhlOVYrN1pONUMxZytGeHJSQmxhYlloOWtCdDFCNzg4MTM5NWpGCkxmVUJnUUtCZ1FDZVFvRHRWek5zNmEvUE8xeEttQ01mYkR5MHRUeXl6bCtDUGY1OFZGbjB1ODhjcWJBQytFdXUKZ3ZKMVhKVy84cEppREJtdUh3SGFDY0lZRFI3dXBldjA2OW5ZMkY0Q1Y5TnVreE5WWjdxRnVNWTV4KzIvb3JUQgpmUkV1V2dCOTFkWmpaN0srTEk4Smx0MG1qWEVpakgxMnJOZDhHY042MUdIblRNVzhDOURmeEE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQU8wMDV5YTdxZkJ6REJPQ2VtU2dqM3d3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TVRBek1qQXlNVEl5TkRKYQpGdzB5TWpBek1qQXlNVEl5TkRKYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURLcEJnRXh3bDdWQXJUVFRXKzhMMFcKZGlTMVJibGV0ak5WOXZyNUdIOCs5VXVKcDBSSjV2UXMxek1nMVZxc0ZLMEhPdFkxTzBTZ05BZHdtdjBKSWdoOQpzSGtPMnRHbGpKTjdzNFBDbUJKWTc0Nk1GcUE0WVBRM0lJQXNiL2pCZzVkOXFvZ3Mzb3dhbWlSZ2cxK3RNajZHClEvVWdZay9YVjRFd1FucTdmUnJkdVJNazRrdHo1bUFsUVlZTGEwdHpKaWRkaC9EaWJINEM0ZTRwMU90dUlQT2wKdUZtRFY2QzhEMEtVVEp2aUhrM1YyT0V0M0oyeTFCZ3I5ZTR5Q09MbDJFWVlVdmxBeWZjbVpzUy80TGVoOTNvQwpsQ0k0WXpseUl4Mk5rRHJsL0ZNZFJXM2ZaakFLcEovbzZ6eDFhVkJmazJOSWdRQi9MZk1nRlBXeC9VbE9MNHE3CkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQUg1dUJXQXJEcVJtT0x5L01MOC9IaHJlNkpaU1lNCmdIenorUkdUaURkZ1doZWlNZG9CMjdyYXVESTFWdmxHNTdHeUJLQXlYUWdjb3NUdkhsWWs1bEdsSVh1ZzRSemIKQkg1TGtJNXUzL2ZpNXN1M21YQW5HUEJPVHNKRDRpanYxd1JlNWNRV1E0MDIxUGEyc1NxWnh1aHRZaTVjQVRxbApIQm9GczVLMzZkZEJmcitZOHI1amNzMTNLOVQ3Sm8reWV6cnJ4TFFCTmZKS1djMWZTaGR2N2k3Y1QvTjZERzZOCm9iT0lrbUc3ckhBM2VBWFk0OTVxYlQxZUNueXhHTUVzOVltaFVCUHR1VzJnNHhENEUzNVV4M2lvU24xeGQ5Z1kKVDJzYy9CTEtzR29IR3N1ZWx2bXZxVzR3RUxKQlQ3NVZ5L1dQdWdNNEVqdWcybHFQb3lUK3hLOW8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["policy"]
  resources: ["podsecuritypolicies"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: viz-psp
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    namespace: linkerd-viz
roleRef:
  kind: Role
  name: psp
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
- kind: ServiceAccount
  name: grafana
  namespace: linkerd-viz
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.0
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: 0d5b035f4d141dc2c13e1f89046de78fe0fb1208075734c3977400b866f2db51
        linkerd.io/created-by: linkerd/helm stable-2.10.0
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        image: cr.l5d.io/linkerd/metrics-api:stable-2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: metrics-api
---
###
### Grafana
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: grafana-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
data:
  grafana.ini: |-
    instance_name = grafana
    [server]
    root_url = %(protocol)s://%(domain)s:/grafana/
    [auth]
    disable_login_form = true
    [auth.anonymous]
    enabled = true
    org_role = Editor
    [auth.basic]
    enabled = false
    [analytics]
    check_for_updates = false
    [panels]
    disable_sanitize_html = true
  datasources.yaml: |-
    apiVersion: 1
    datasources:
    - name: prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://prometheus.linkerd-viz.svc.cluster.local:9090
      isDefault: true
      jsonData:
        timeInterval: "5s"
      version: 1
      editable: true

  dashboards.yaml: |-
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: true
      editable: true
      options:
        path: /var/lib/grafana/dashboards
        homeDashboardId: linkerd-top-line
---
kind: Service
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: grafana
  ports:
  - name: http
    port: 3000
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.0
    component: grafana
    namespace: linkerd-viz
  name: grafana
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: grafana
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.0
      labels:
        linkerd.io/extension: viz
        component: grafana
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - env:
        - name: GF_PATHS_DATA
          value: /data
        # Force using the go-based DNS resolver instead of the OS' to avoid failures in some environments
        # see https://github.com/grafana/grafana/issues/20096
        - name: GODEBUG
          value: netdns=go
        image: cr.l5d.io/linkerd/grafana:stable-2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
        name: grafana
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
        resources:
        securityContext:
          runAsUser: 472
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/grafana
          name: grafana-config
          readOnly: true
      serviceAccountName: grafana
      volumes:
      - emptyDir: {}
        name: data
      - configMap:
          items:
          - key: grafana.ini
            path: grafana.ini
          - key: datasources.yaml
            path: provisioning/datasources/datasources.yaml
          - key: dashboards.yaml
            path: provisioning/dashboards/dashboards.yaml
          name: grafana-config
        name: grafana-config
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    - job_name: 'grafana'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: ['linkerd-viz']
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        action: keep
        regex: ^grafana$

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.0
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.0
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
      - args:
        - --log.level=info
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.19.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.0
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: 5f9753bf576296bbb26757af3078f1d6bd4f2d8a3079424e04eb8af932b62a04
        linkerd.io/created-by: linkerd/helm stable-2.10.0
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -identity-trust-domain=cluster.local
        image: cr.l5d.io/linkerd/tap:stable-2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRSElNNHVSVHRwL3JyR05qNCtrQlZzekFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TURNeQpNREl4TWpJME1sb1hEVEl5TURNeU1ESXhNakkwTWxvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU5UbE5STnI2a1VYSllSbzQ1L0U2M0xWUE1VRTVtRm8rQ1Q1RzhXZDhocEwvY3cxMEJjdDdiVnBoVmp3MjdPTgpNQVV3TFlSNGRuWkt2bjlKRjdyanR2ems1dklaeG53UFVobWpXQ2pJbVhUTnBSOTdCL1NnNFFiSXFvNEZ5L0lWCndRa0dsZmdOWS9POXp0KzBUZS9Eakx6ZzlxcmljbmgrNEVBb05seDZody94UDdGUm14YWUyN3dyTzVHWklRWUYKNnRnWEdHTGUxckphWE1DekQrYVlFTUFZR0Q0amRpMjRpVVJoc3BEVnl2SE40VHZPUTBzRUlpanVudFpxd0JxYgpIbHlEMVA2TGhPdmV2bjRyRmNJOWhlSjh3RGNYK25PRUUxaVBlaHkySVVYUTdYNUVqWjVmcFg5aDNmd1VXUk9sClZZME9ISkVmeGlWOFNZUWdlcjBPMk5jQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBRytERDU4NkpWdjN6bHNRejNTZ1ZJR0QwRUNvK2JxUkwweDFjNnU5cVFYdmF6MGpZVk43U0RRbndITUUKVW05UUpmVlVFVWU0WkFqZVBCaTdncXZ2S1kxVzc3N1JHbVFDeTJJQ3FIUjNMTGZvYm9FS1NVRE1WVURxY28wZwpuY0VtWVpZam9KeVN2K093SS9wYUJjck5maVZ1L3orREtIS2Jzb1BIenhpRHlRRFlOU01yQlp6S09jeXVKYmVsCnFjZVdqZ2hNQlJoTmhjMjMyL1dkYWJFZ3Y0eWZBOHFwZG80aVRtRTVTcFM1ZGo1MERyaWtqdW9sK0sxQmliT3UKTEZNekxjSEhGOXhMa3RtU1FuQjF2MjJCalJyUDF4OHQ3Rk9iVDRZSTZlV2RlYVIzNkxmb3JJWk00Mmx4TzY2MQpHc29GRWZlU29tYkRnbm5kYXE5S3VoSmVnYVU9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMU9VMUUydnFSUmNsaEdqam44VHJjdFU4eFFUbVlXajRKUGtieFozeUdrdjl6RFhRCkZ5M3R0V21GV1BEYnM0MHdCVEF0aEhoMmRrcStmMGtYdXVPMi9PVG04aG5HZkE5U0dhTllLTWlaZE0ybEgzc0gKOUtEaEJzaXFqZ1hMOGhYQkNRYVYrQTFqODczTzM3Uk43OE9Ndk9EMnF1SnllSDdnUUNnMlhIcUhEL0Uvc1ZHYgpGcDdidkNzN2taa2hCZ1hxMkJjWVl0N1dzbHBjd0xNUDVwZ1F3QmdZUGlOMkxiaUpSR0d5a05YSzhjM2hPODVEClN3UWlLTzZlMW1yQUdwc2VYSVBVL291RTY5NitmaXNWd2oyRjRuekFOeGY2YzRRVFdJOTZITFloUmREdGZrU04KbmwrbGYySGQvQlJaRTZWVmpRNGNrUi9HSlh4SmhDQjZ2UTdZMXdJREFRQUJBb0lCQVFDMFBkM0N0S0dobnVnZgpneUg3dVI5Um1HRWJ1SHRIeXpRVE1XZ20xZ01MNm54VU1OY2RXTUFnejlhYXAwaUthaVZXcnlSS1BDYW5IYjdNClN0aXhYR3NuRHJETUZiQnFoaG9QSkxEVnpvZkZVUG5VZmpnTkQwdVVqNzErQWtCWms3dGJaZDBBSm00U0JRZXAKYzZCc05wWG5yMXFHOExMVGV5OW1nZVVNUkp3bWpLQTRnekZiVSszcDhnQXZlUzduWFoxdkthaHJ2YXNnVmdDSQoxY2Nkd3FzbnBYS3hQT01Sc01qMDZzWE0wL3JyRE5zbUNQQWp6SGZLK3cyMjRDUUI3T0crRHdjNTRBMnU0WG5lCnZobkRyT29RRWpRUTdqcWcrYzNhWjB5Ukl1UEJYSlJpZTdHaEtQT0Q5OGJ2d0FmR0YxR3FYWm95Yld6UWFydEYKS2FLS0x6RHhBb0dCQVBpU1libGlIUVorUkRQQlU2SUVoZU1GT3JJdW1xRUwveHFGVDZaNW10TnJWZ1RLa0pxVgo2c3kwMURZeEFFS1dqNVN0OU1zV3lCNWV5N3E3aFh3L2J1ekpvOVdMYW4vbVU3clp5NWo2S3ZacWZWZVlHWCtPCjQ1U1N2blNWK21pMUFOalpPa0NFN1F2TFJXTEpNMmY4TVllOUhKam1RRC8yM2k5YUlrUmRwNzRwQW9HQkFOdEIKNVBPNFJuNDJEZitpdDVYOVZOZFZRZVdYU3hXM29DVHM3WjdGOSs4Y1loalBRZktlT3orR3lzNHFoSEg2bzdBTQpRVWZVTlQ1WXZOQys0Y3p6dW1UekIyVHZ4cFhjT0hiVjFwdytsZWl6YXhtaXd5RWY5K2tCZ1ZxdGZOTklpMXpzCjFOOUZrbW9hVFdKTXgvSXhtbkVJbkE3MXNxWU0vbTZLOUNhajVyNy9Bb0dBTFNacG1jSzRndlZzYmZvdnRyNGIKazZEZmlIM3VtRklWaER1eXZBcGFsUXhxRTNTM3oxeHJ5Y01PeU1rZHd2cVdHZXQvQzJTWDlPeERGU2Y2bHhidQpqeFFSTGppa241YTJucm53d1ZpdmRSTGlzWVp2R3p4WkdpT05kSi9KWER1RWE5OEpOYTd2WDdVTVpXVW1jVHpkCndrb1haNjVxL1ROYUtEKzIrYlFKUkFFQ2dZRUFueEZOUXl2N3FIRWE4czFnRjJiMCtFd1lSTExnZkY3OXhneEYKMEJ5YjVWTllMOXVkWXFFOUpyZHB4dXk5cmR0Q2llUTZNQnhhakdMZ2lTa1N0QmhXc0FwSTRRZTdzTmxWOVpEcAo0K3piNFRqWmlIMjJ4djlrWWh6L2RZUEx2WlV4MWpiVHNTL09Lei90eUZVZjhpdmVlZ2JmQVZOclNtQys3Zi9OClpZTWZVbzBDZ1lFQTdvaUxKU05nMVRLUDQ0akpZRVl4YUt2RUozOEtRNHc3dDRsQWVYVHdZVGU4T24xZ0hrVTkKaloyMlkyd1lORXFCcEFXVUUrS0JpaUwvT3lCZTFQenVPTmVUdURGKzVRa1RnRXNIVElzVjArdDBQVk9uVVA2OApBY2JLV2twRkg3R1NUOWtKemR3bmlQRG9KWnZqR3hkVW9qOFM0c0plc0lZY1JNY2VoRkpjM2FVPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRSElNNHVSVHRwL3JyR05qNCtrQlZzekFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TURNeQpNREl4TWpJME1sb1hEVEl5TURNeU1ESXhNakkwTWxvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU5UbE5STnI2a1VYSllSbzQ1L0U2M0xWUE1VRTVtRm8rQ1Q1RzhXZDhocEwvY3cxMEJjdDdiVnBoVmp3MjdPTgpNQVV3TFlSNGRuWkt2bjlKRjdyanR2ems1dklaeG53UFVobWpXQ2pJbVhUTnBSOTdCL1NnNFFiSXFvNEZ5L0lWCndRa0dsZmdOWS9POXp0KzBUZS9Eakx6ZzlxcmljbmgrNEVBb05seDZody94UDdGUm14YWUyN3dyTzVHWklRWUYKNnRnWEdHTGUxckphWE1DekQrYVlFTUFZR0Q0amRpMjRpVVJoc3BEVnl2SE40VHZPUTBzRUlpanVudFpxd0JxYgpIbHlEMVA2TGhPdmV2bjRyRmNJOWhlSjh3RGNYK25PRUUxaVBlaHkySVVYUTdYNUVqWjVmcFg5aDNmd1VXUk9sClZZME9ISkVmeGlWOFNZUWdlcjBPMk5jQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBRytERDU4NkpWdjN6bHNRejNTZ1ZJR0QwRUNvK2JxUkwweDFjNnU5cVFYdmF6MGpZVk43U0RRbndITUUKVW05UUpmVlVFVWU0WkFqZVBCaTdncXZ2S1kxVzc3N1JHbVFDeTJJQ3FIUjNMTGZvYm9FS1NVRE1WVURxY28wZwpuY0VtWVpZam9KeVN2K093SS9wYUJjck5maVZ1L3orREtIS2Jzb1BIenhpRHlRRFlOU01yQlp6S09jeXVKYmVsCnFjZVdqZ2hNQlJoTmhjMjMyL1dkYWJFZ3Y0eWZBOHFwZG80aVRtRTVTcFM1ZGo1MERyaWtqdW9sK0sxQmliT3UKTEZNekxjSEhGOXhMa3RtU1FuQjF2MjJCalJyUDF4OHQ3Rk9iVDRZSTZlV2RlYVIzNkxmb3JJWk00Mmx4TzY2MQpHc29GRWZlU29tYkRnbm5kYXE5S3VoSmVnYVU9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: 2b19a882f36ec516623f2fbd9919ceebff12301a5c9a28ed504c6db74e655178
        linkerd.io/created-by: linkerd/helm stable-2.10.0
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - -log-level=info
        image: cr.l5d.io/linkerd/tap:stable-2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.0
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.0
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-controller-api-addr=linkerd-controller-api.linkerd.svc.cluster.local:8085
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -grafana-addr=grafana.linkerd-viz.svc.cluster.local:3000
        - -controller-namespace=linkerd
        - -viz-namespace=linkerd-viz
        - -log-level=info
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        image: cr.l5d.io/linkerd/web:stable-2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: web
